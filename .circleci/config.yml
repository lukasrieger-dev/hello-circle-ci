# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  print_pipeline_id:
    description: Print the pipeline id to the console.
    parameters:
      id:
        type: string
        default: "0"
    steps:
      - run: echo << parameters.id >>

  destroy_environment:
    steps:
      - run:
          name: destroy environment
          command: |
            aws cloudformation delete-stack --stack-name infrastructure

jobs:
  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id:
          id: << pipeline.id >>
      - run: echo "Hello World!" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt

  print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt

  catch_fail:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: return 1
      - run:
          name: Print error infos
          command:  echo "TEST FAIL MESSAGE!"
          when: on_fail

  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: create infrastructure
          command: |
            aws cloudformation deploy \
              --stack-name infrastructure \
              --template-file infrastructure.yml

  create_ec2instance:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: create ec2 instance
          command: |
            aws cloudformation deploy \
              --stack-name ec2instance \
              --template-file ec2instance.yml


  create_inventory_file:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: 
      - run: echo "[all]" > ~/inventory.txt
      - run: aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/
      - checkout
      - add_ssh_keys:
          fingerprints: [64:1b:eb:b0:04:d2:f5:7c:69:1e:cf:a5:03:e5:d5:f4]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/inventory.txt playbook.yml

  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test with curl
          command: |
            URL="https://google.com"
            if curl -s --head ${URL}
            then
              return 0
            else
              echo "Smoke test failed."
              returrn 1
            fi
      #- destroy_environment
        #when: on_fail



workflows:
  deploy:
    jobs:
      - create_infrastructure
      - create_ec2instance :
          requires:
            - create_infrastructure
      - create_inventory_file:
          requires:
            - create_ec2instance
      - configure_infrastructure:
          requires:
            - create_inventory_file
      - smoke_test:
          requires:
            - configure_infrastructure
